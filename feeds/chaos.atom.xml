<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>蠎周刊 - Chaos</title><link href="http://weekly.pychina.org/" rel="alternate"></link><link href="http://weekly.pychina.org/feeds/chaos.atom.xml" rel="self"></link><id>http://weekly.pychina.org/</id><updated>2013-12-19T10:42:00+08:00</updated><entry><title>How to from Jekyll jump into Pelican</title><link href="http://weekly.pychina.org/chaos/jekyll-to-pelican.html" rel="alternate"></link><published>2013-12-19T10:42:00+08:00</published><updated>2013-12-19T10:42:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:weekly.pychina.org,2013-12-19:/chaos/jekyll-to-pelican.html</id><summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;如何从 Jekyll 转进入 Pelican&lt;/h1&gt;
&lt;p&gt;简述静态网站从 Jekyll 环境中迁移为 纯 Python 
&lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img alt=";" src="https://0.gravatar.com/avatar/0cb9d9d7e6b152d24d2b78c6464502a6?d=https%3A%2F%2Fidenticons.github.com%2Fc0b8694f59232c6681a92c4c9fec3e18.png&amp;amp;r=x&amp;amp;s=440"&gt;&lt;/p&gt;
&lt;h2&gt;为毛&lt;/h2&gt;
&lt;p&gt;社区在发展, 原先的 蠎周刊,为方便,使用了 gitcafe 内置的 Jekyll 服务,
所以,其实在使用 Ruby 自动编译和发布.&lt;/p&gt;
&lt;p&gt;总是感觉不够纯粹 Pythonic ...&lt;/p&gt;
&lt;p&gt;故而, 下决心完成迁移&lt;/p&gt;
&lt;h1&gt;整体&lt;/h1&gt;
&lt;p&gt;忽然发现,俺感觉很直觉的事儿,也写了文档,
但是,其它人真正首次上手全然一头雾水...&lt;/p&gt;
&lt;p&gt;所以
&lt;a href="http://xiaolai.github.io/alpha/on-learning/"&gt;学习学习再学习 - xiaolai&lt;/a&gt;
提出的,俺实在无法同意更多..&lt;/p&gt;
&lt;p&gt;&lt;img alt="Impossible_staircase" src="http://upload.wikimedia.org/wikipedia/commons/3/34/Impossible_staircase.svg"&gt;&lt;/p&gt;
&lt;p&gt;这是最难的知识结构——它往往看起来跟线性结构没什么区别，但，最终令人迷惑，甚至懊恼。
用最直白的话来描述，就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;初级的知识需要对高级知识深入了解才能真正深入了解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;——你看看这句话多拗口就多少有点概念了。&lt;/p&gt;
&lt;p&gt;所以 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;如何从 Jekyll 转进入 Pelican&lt;/h1&gt;
&lt;p&gt;简述静态网站从 Jekyll 环境中迁移为 纯 Python 
&lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img alt=";" src="https://0.gravatar.com/avatar/0cb9d9d7e6b152d24d2b78c6464502a6?d=https%3A%2F%2Fidenticons.github.com%2Fc0b8694f59232c6681a92c4c9fec3e18.png&amp;amp;r=x&amp;amp;s=440"&gt;&lt;/p&gt;
&lt;h2&gt;为毛&lt;/h2&gt;
&lt;p&gt;社区在发展, 原先的 蠎周刊,为方便,使用了 gitcafe 内置的 Jekyll 服务,
所以,其实在使用 Ruby 自动编译和发布.&lt;/p&gt;
&lt;p&gt;总是感觉不够纯粹 Pythonic ...&lt;/p&gt;
&lt;p&gt;故而, 下决心完成迁移&lt;/p&gt;
&lt;h1&gt;整体&lt;/h1&gt;
&lt;p&gt;忽然发现,俺感觉很直觉的事儿,也写了文档,
但是,其它人真正首次上手全然一头雾水...&lt;/p&gt;
&lt;p&gt;所以
&lt;a href="http://xiaolai.github.io/alpha/on-learning/"&gt;学习学习再学习 - xiaolai&lt;/a&gt;
提出的,俺实在无法同意更多..&lt;/p&gt;
&lt;p&gt;&lt;img alt="Impossible_staircase" src="http://upload.wikimedia.org/wikipedia/commons/3/34/Impossible_staircase.svg"&gt;&lt;/p&gt;
&lt;p&gt;这是最难的知识结构——它往往看起来跟线性结构没什么区别，但，最终令人迷惑，甚至懊恼。
用最直白的话来描述，就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;初级的知识需要对高级知识深入了解才能真正深入了解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;——你看看这句话多拗口就多少有点概念了。&lt;/p&gt;
&lt;p&gt;所以,还是按照 easy 模式来,
先简单的说,再往死里说折腾的技术细节...&lt;/p&gt;
&lt;h2&gt;已知条件&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://help.github.com/articles/user-organization-and-project-pages"&gt;User, Organization and Project Pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github 的 所谓 &lt;code&gt;pages&lt;/code&gt; 服务的本质:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;云端的 Jekell 服务&lt;/li&gt;
&lt;li&gt;对约定的仓库,感知变化时,就尝试进行编译&lt;/li&gt;
&lt;li&gt;并自动完成发布(现在是到 github.io)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的约定仓库,只有两种情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户/组织: &lt;ul&gt;
&lt;li&gt;比如, 注册成的用户/组织 为 https://github.com/foo&lt;/li&gt;
&lt;li&gt;则, github 尝试进行 &lt;code&gt;pages&lt;/code&gt; 发布的仓库为:&lt;/li&gt;
&lt;li&gt;https://github.com/foo/foo.github.io&lt;/li&gt;
&lt;li&gt;发布到:  https://foo.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目&lt;ul&gt;
&lt;li&gt;任意一个项目仓库,比如, https://github.com/foo/foobar&lt;/li&gt;
&lt;li&gt;则, githuba 支持自动对此仓库的 &lt;code&gt;gh-pages&lt;/code&gt; 分支进行 &lt;code&gt;pages&lt;/code&gt; 编译&lt;/li&gt;
&lt;li&gt;而发布为: https://foo.github.io/foobar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Pelican行为&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; 呢其实也只是
Python 世界中大堆静态网站发布工具中的一个,
为毛选中这个?
只是因为 42分钟里,大妈将其折腾起来了,
而且官方的文档/案例/样式,的确足够丰富,
给人信心...&lt;/p&gt;
&lt;p&gt;而其本身对网站的约定非常简单:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置好 &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;content&lt;/code&gt; 目录中写作&lt;/li&gt;
&lt;li&gt;一键命令编译完成静态网络的生成,组织到 &lt;code&gt;output&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;所以?方案!&lt;/h2&gt;
&lt;p&gt;基于以上的整体理解, 就可以决策怎么基于 github 的 &lt;code&gt;pages&lt;/code&gt; 服务,
来进行免费的网站发布了;&lt;/p&gt;
&lt;p&gt;目测也就两招:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在用户/组织 的 &lt;code&gt;pages&lt;/code&gt; 仓库中直接部署 Pelican 工程&lt;ul&gt;
&lt;li&gt;只是要在根目录部署一个自动跳转到 &lt;code&gt;output&lt;/code&gt; 子目录的 &lt;code&gt;index.html&lt;/code&gt; 页面&lt;/li&gt;
&lt;li&gt;以便发布后可以略过根目录来访问编译结果的内容&lt;/li&gt;
&lt;li&gt;发布成 https://foo.github.io/output&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用两个仓库, 将用户/组织 的 &lt;code&gt;pages&lt;/code&gt; 仓库部署为 &lt;code&gt;output&lt;/code&gt; 子目录&lt;ul&gt;
&lt;li&gt;这样就能自动发布为 https://foo.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很明显,第二种逼格较髙,所以,就这样办了!&lt;/p&gt;
&lt;h2&gt;宏观流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首次建立本地撰写环境:&lt;ol&gt;
&lt;li&gt;安装好 &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分别clone 出两个仓库:&lt;ul&gt;
&lt;li&gt;qpython-android.pelican &lt;/li&gt;
&lt;li&gt;qpython-android.github.io &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先在 &lt;code&gt;qpython-android.pelican&lt;/code&gt; 中测试确认好 pelical 工程可用,并尝试编译&lt;/li&gt;
&lt;li&gt;一切正确的话,将 &lt;code&gt;qpython-android.github.io&lt;/code&gt; 复制覆盖为 &lt;code&gt;qpython-android.pelican/output&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;以后,日常的维护就再也不需要 &lt;code&gt;qpython-android.github.io&lt;/code&gt; 了!&lt;ol&gt;
&lt;li&gt;进入 &lt;code&gt;qpython-android.pelican/content&lt;/code&gt; 创建/增补/修订 文章&lt;/li&gt;
&lt;li&gt;回到 &lt;code&gt;qpython-android.pelican&lt;/code&gt; 执行 &lt;code&gt;fab build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;本地到 &lt;code&gt;output&lt;/code&gt; 打开对应页面检查效果&lt;/li&gt;
&lt;li&gt;还是在 &lt;code&gt;qpython-android.pelican&lt;/code&gt; 执行 &lt;code&gt;fab pub2hub&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;完成对 &lt;code&gt;qpython-android.github.io&lt;/code&gt; 仓库实际的 push &lt;/li&gt;
&lt;li&gt;即, 发布成网站: http://qpython-android.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后,在 &lt;code&gt;qpython-android.pelican&lt;/code&gt; 进行正常的 &lt;code&gt;git add-&amp;gt;ci-&amp;gt;pu&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;对文章源文本完成到 &lt;code&gt;qpython-android.pelican&lt;/code&gt; 仓库的提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;收功!&lt;/p&gt;
&lt;h1&gt;细节&lt;/h1&gt;
&lt;p&gt;然后, 再分享俺的折腾过程...&lt;/p&gt;
&lt;h2&gt;过程&lt;/h2&gt;
&lt;p&gt;整体上,其实就三步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个 theme ,完成本地 demo 整明白怎么使用 Pelican&lt;/li&gt;
&lt;li&gt;将原先 Jekyll 格式的文章声明部分文本, 批量转化为 Pelican 的&lt;/li&gt;
&lt;li&gt;改进发布流程,自动化&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;theme&lt;/h3&gt;
&lt;p&gt;综合对比了官网收集的一堆样式,选择了 &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;DandyDev&lt;/a&gt; 的,根据说明,立即就完成了编译,本地检阅 ;-)&lt;/p&gt;
&lt;h3&gt;meta&lt;/h3&gt;
&lt;p&gt;果断使用 Python 脚本,快速完成转换
&lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_plugins/jekyll2pelican.py"&gt;jekyll2pelican.py&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;fab&lt;/h3&gt;
&lt;p&gt;果断使用 &lt;code&gt;fabric&lt;/code&gt; 进行自动化处理!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/fabfile.py"&gt;fabfile.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;定制了 &lt;code&gt;pub2cafe&lt;/code&gt; 完成自动化发布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 &lt;code&gt;gitcafe&lt;/code&gt; 只有用户同名-pages 服务,所以,对于当前 &lt;code&gt;蠎周刊&lt;/code&gt; 的 Pelican 工程,
用两个仓库,配合完成:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;https://github.com/qpython-android/qpython-android.pelican.git
    +- ..
    +- pelicanconf.py   主配置文件
    +- content          内容目录  
    +- output           编译输出目录
    |    `- https://github.com/qpython-android/qpython-android.github.io.git 
    |                          |
    |                          \-- 即合法的
    +- .gitignore       配置忽略 output 目录
    +- ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样一来,目录,就不用进入 &lt;code&gt;output&lt;/code&gt; 目录进行 git 操作了
平时的发布流程就是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;content&lt;/code&gt; 目录对应分类子目录中创建 &lt;code&gt;*.md&lt;/code&gt; 文本,组织文章&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fab build&lt;/code&gt; 完成编译,本地检阅文章效果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add . &amp;amp;&amp;amp; git ci &amp;amp;&amp;amp; git pu&lt;/code&gt; 将增补提交&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fab pub2cafe&lt;/code&gt; 自动完成进入 &lt;code&gt;output&lt;/code&gt; 后的一系列 git 操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对应的 配置中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#DELETE_OUTPUT_DIRECTORY = True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就绝对不能打开注释
不然 &lt;code&gt;output&lt;/code&gt; 目录清除,就没有了 &lt;code&gt;.git&lt;/code&gt; 也就无法发布了...&lt;/p&gt;
&lt;h2&gt;坑&lt;/h2&gt;
&lt;p&gt;整个过程中,遇到没有找到文档的小麻烦,自个儿解决了的....&lt;/p&gt;
&lt;h3&gt;DISQUS&lt;/h3&gt;
&lt;p&gt;果断遇到了 DISQUS 配置了,不生效的问题,上下折腾, 才发现很多人都遇到了这个问题,
追踪到代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//... pelican-themes/pelican-bootstrap3/templates/includes/comments.html&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;disqus_shortname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{ DISQUS_SITENAME }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// required: replace example with your forum shortname&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;disqus_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{ article.slug }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;disqus_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{ SITEURL }}/{{ article.url }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;才发现 &lt;code&gt;SITEURL&lt;/code&gt; 的配置是决定性的,
一定要同 &lt;code&gt;DISQUS&lt;/code&gt; 申请时的一致;
本地编译后, 看一眼源代码,就知道是否靠谱了...&lt;/p&gt;
&lt;h3&gt;pages&lt;/h3&gt;
&lt;p&gt;突然发现 &lt;code&gt;content/pages&lt;/code&gt; 目录中的文本,是种特殊文章,不但可以出现在导航,而且使用专用的模板,
所以,默认是没有 &lt;code&gt;DISQUS&lt;/code&gt; 槽接的!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考,俺的&lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/page.html"&gt;page.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;追加了仿制的: &lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/includes/page_comments.html"&gt;includes/page_comments.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;fixed!&lt;/p&gt;
&lt;h3&gt;CATEGORY_FEED_ATOM&lt;/h3&gt;
&lt;p&gt;一时手賎,打开了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/%s.atom.xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果,发现不能在模板里简单的完成分类子 RSS 的链接!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-th icon-large&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;Categories&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% for cat, null in categories %}
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;list-group-item&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ cat.url }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-folder-open icon-large&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;{{ cat }}
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/feeds/{{ cat }}.atom.xml&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-rss-sign&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为这儿的 &lt;code&gt;{{ cat }}&lt;/code&gt; 是分类的名称,可能包含大小写字母,
而配置指导下生成的 RSS 文件是全小写的...&lt;/p&gt;
&lt;p&gt;纠结了一会儿,也没有查到对应的文档,突然想到各种内置对象都有的 &lt;code&gt;sulg&lt;/code&gt; 属性!&lt;/p&gt;
&lt;p&gt;于是就猜对了...
参考:
&lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/includes/sidebar.html#L22"&gt;includes/sidebar.html#22&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;author&lt;/h3&gt;
&lt;p&gt;原样式作者因为是个人网站,所以,无所谓 &lt;code&gt;Author&lt;/code&gt; 的信息,
但是,作为社区用共笔环境,就必须有所体现,
在 &lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/includes/article_info.html"&gt;includes / article_info.html&lt;/a&gt;
先打开作者的属性输出,&lt;/p&gt;
&lt;p&gt;然后,从别的 theme 工程中抄一个模板:
&lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/author.html"&gt;author.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;即好!&lt;/p&gt;
&lt;h3&gt;TOC&lt;/h3&gt;
&lt;p&gt;是的,以往 rST/t2t 时,甚至于 Word 时都有的 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TOC&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;章节索引&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;肿么可以没有?!&lt;/p&gt;
&lt;p&gt;果断: &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/extract_toc"&gt;pelican-plugins/extract_toc at master · getpelican/pelican-plugins&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;只是这货竟然是依赖 &lt;code&gt;beautifulsoup4&lt;/code&gt; 的! 对于非 &lt;code&gt;UNIX/Linux/MAC&lt;/code&gt; 用户而言,
人艰不拆哪!!!&lt;/p&gt;
&lt;h2&gt;参考:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://riku.gitcafe.com/pelican-gitcafe.html"&gt;使用 Pelican + GitCafe Page 创建 Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.imley.net/2013/01/03/disqus-thread-url-issue/#content"&gt;吐槽一下DISQUS的thread链接错误问题 | Ley's blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://raichev.net/blohg-to-pelican.html"&gt;Alex Raichev - Blog - Blohg to Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;160401 ZoomQuiet 迁移发布到 github as gh_pages&lt;/li&gt;
&lt;li&gt;140127 ZoomQuiet 增补宏观理解&lt;/li&gt;
&lt;li&gt;140120 ZoomQuiet 复制到 QPython 的 Pelican 工程&lt;/li&gt;
&lt;li&gt;131219 ZoomQuiet 为 &lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/README.md"&gt;CPyUG/weekly - GitCafe&lt;/a&gt; 创建&lt;/li&gt;
&lt;/ul&gt;</content><category term="howto"></category><category term="pelican"></category></entry></feed>